var ElasticQueue, Hoek, async, baseConfig, elasticsearch, events, exports,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

elasticsearch = require('elasticsearch');

Hoek = require('hoek');

async = require('async');

events = require('events');

baseConfig = {
  elasticsearch: {
    client: {
      host: "localhost:9200",
      log: "info",
      minSockets: 1,
      sniffInterval: 60000,
      sniffOnStart: true,
      suggestCompression: true
    }
  },
  concurency: 1,
  batchSize: 500,
  commitTimeout: 1000,
  rateLimit: 2000,
  batchType: "batch_single"
};

ElasticQueue = (function(superClass) {
  extend(ElasticQueue, superClass);

  function ElasticQueue(config, esClient) {
    if (config == null) {
      config = {};
    }
    this.batch_single = bind(this.batch_single, this);
    this.task = bind(this.task, this);
    this.batchComplete = bind(this.batchComplete, this);
    this.batch = bind(this.batch, this);
    this.check = bind(this.check, this);
    this.drain = bind(this.drain, this);
    this.config = Hoek.applyToDefaults(baseConfig, config);
    this.queue = [];
    this.checkTimer = setInterval(this.check, this.config.rateLimit);
    this.async = async.queue(this.task, this.config.concurency);
    this.async.drain = this.drain;
    this.count = 1;
    if (esClient != null) {
      this.esClient = esClient;
    } else {
      this.setup_elastic();
    }
  }

  ElasticQueue.prototype.drain = function() {
    if (this.queue.length === 0) {
      return this.emit('drain');
    }
  };

  ElasticQueue.prototype.setup_elastic = function() {
    return this.esClient = new elasticsearch.Client(this.config.elasticsearch.client);
  };

  ElasticQueue.prototype.push = function(item) {
    return this.queue.push(item);
  };

  ElasticQueue.prototype.check = function() {
    if (this.queue.length > 0) {
      return this.batch();
    }
  };

  ElasticQueue.prototype.batch = function() {
    var size;
    size = this.queue.length;
    if (size >= this.config.batchSize) {
      size = this.config.batchSize;
    }
    if (size > 0) {
      this.async.push({
        batch: this.queue.splice(0, size),
        count: this.count++
      }, this.batchComplete);
    }
    if (this.queue.length > 0) {
      clearTimeout(this.batchTimeout);
      return this.batchTimeout = setTimeout(this.batch, this.config.rateLimit + this.config.commitTimeout);
    }
  };

  ElasticQueue.prototype.batchComplete = function(err, resp) {
    if (err) {
      return this.emit('error', err);
    }
    return this.emit('batchComplete', resp);
  };

  ElasticQueue.prototype.task = function(task, callback) {
    this.emit('task', task);
    return this[this.config.batchType](task, callback);
  };

  ElasticQueue.prototype.batch_single = function(task, done) {
    var index, key, ref, value;
    index = [];
    ref = task.batch;
    for (key in ref) {
      value = ref[key];
      index.push({
        index: {
          _index: value.index,
          _type: value.type,
          _id: value.id
        }
      });
      if (value.body != null) {
        index.push(value.body);
      }
    }
    return this.esClient.bulk({
      body: index
    }, function(err, res) {
      if (err) {
        return done(err);
      }
      return done(null, res);
    });
  };

  ElasticQueue.prototype.close = function() {
    return this.esClient.close();
  };

  return ElasticQueue;

})(events.EventEmitter);

module.exports = exports = ElasticQueue;

//# sourceMappingURL=data:application/json;base64,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Q0FBQTs7c0JBQUE7O0dBRnlCLE1BQU0sQ0FBQyxhQXBCbEMsQ0FBQTs7QUFBQSxNQXdGTSxDQUFDLE9BQVAsR0FBaUIsT0FBQSxHQUFVLFlBeEYzQixDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiZWxhc3RpY3NlYXJjaCA9IHJlcXVpcmUgJ2VsYXN0aWNzZWFyY2gnXG5Ib2VrID0gcmVxdWlyZSAnaG9laydcbmFzeW5jID0gcmVxdWlyZSAnYXN5bmMnXG5ldmVudHMgPSByZXF1aXJlICdldmVudHMnXG5cbmJhc2VDb25maWcgPVxuICBlbGFzdGljc2VhcmNoOlxuICAgIGNsaWVudDpcbiAgICAgIGhvc3Q6IFwibG9jYWxob3N0OjkyMDBcIlxuICAgICAgbG9nOiBcImluZm9cIlxuICAgICAgbWluU29ja2V0czogMVxuICAgICAgc25pZmZJbnRlcnZhbDogNjAwMDBcbiAgICAgIHNuaWZmT25TdGFydDogdHJ1ZVxuICAgICAgc3VnZ2VzdENvbXByZXNzaW9uOiB0cnVlXG4gIGNvbmN1cmVuY3k6IDEgIyBudW1iZXIgb2YgYWN0aXZlIGJhdGNoZXNcbiAgYmF0Y2hTaXplOiA1MDAgIyBiYXRjaCBzaXplXG4gIGNvbW1pdFRpbWVvdXQ6IDEwMDAgIyB3YWl0IHRpbWUgYmVmb3JlIHNlbmRpbmcgcGFydGlhbCBiYXRjaGVzXG4gIHJhdGVMaW1pdDogMjAwMFxuICBiYXRjaFR5cGU6IFwiYmF0Y2hfc2luZ2xlXCIgIyBiYXRjaF9zaW5nbGU6IGNvbnZlcnQgc2luZ2xlcyBpbnRvIGJhdGNoZXNcblxuY2xhc3MgRWxhc3RpY1F1ZXVlIGV4dGVuZHMgZXZlbnRzLkV2ZW50RW1pdHRlclxuXG4gIGNvbnN0cnVjdG9yOiAoY29uZmlnID0ge30sIGVzQ2xpZW50KSAtPlxuICAgIEBjb25maWcgPSBIb2VrLmFwcGx5VG9EZWZhdWx0cyBiYXNlQ29uZmlnLCBjb25maWdcbiAgICBAcXVldWUgPSBbXVxuICAgIEBjaGVja1RpbWVyID0gc2V0SW50ZXJ2YWwgQGNoZWNrLCBAY29uZmlnLnJhdGVMaW1pdFxuICAgIEBhc3luYyA9IGFzeW5jLnF1ZXVlIEB0YXNrLCBAY29uZmlnLmNvbmN1cmVuY3lcbiAgICBAYXN5bmMuZHJhaW4gPSBAZHJhaW5cbiAgICBAY291bnQgPSAxXG4gICAgaWYgZXNDbGllbnQ/XG4gICAgICBAZXNDbGllbnQgPSBlc0NsaWVudFxuICAgIGVsc2VcbiAgICAgIEBzZXR1cF9lbGFzdGljKClcblxuICBkcmFpbjogPT5cbiAgICBpZiBAcXVldWUubGVuZ3RoIGlzIDBcbiAgICAgIEBlbWl0ICdkcmFpbidcblxuICBzZXR1cF9lbGFzdGljOiAtPlxuICAgIEBlc0NsaWVudCA9IG5ldyBlbGFzdGljc2VhcmNoLkNsaWVudCBAY29uZmlnLmVsYXN0aWNzZWFyY2guY2xpZW50XG5cbiAgcHVzaDogKGl0ZW0pIC0+XG4gICAgQHF1ZXVlLnB1c2ggaXRlbVxuXG4gIGNoZWNrOiA9PlxuICAgIGlmIEBxdWV1ZS5sZW5ndGggPiAwXG4gICAgICBAYmF0Y2goKVxuXG4gIGJhdGNoOiA9PlxuICAgIHNpemUgPSBAcXVldWUubGVuZ3RoXG4gICAgc2l6ZSA9IEBjb25maWcuYmF0Y2hTaXplIGlmIHNpemUgPj0gQGNvbmZpZy5iYXRjaFNpemVcblxuICAgIGlmIHNpemUgPiAwXG4gICAgICBAYXN5bmMucHVzaFxuICAgICAgICBiYXRjaDogQHF1ZXVlLnNwbGljZSgwLCBzaXplKVxuICAgICAgICBjb3VudDogQGNvdW50KyssXG4gICAgICAgIEBiYXRjaENvbXBsZXRlXG5cbiAgICBpZiBAcXVldWUubGVuZ3RoID4gMFxuICAgICAgY2xlYXJUaW1lb3V0IEBiYXRjaFRpbWVvdXRcbiAgICAgIEBiYXRjaFRpbWVvdXQgPVxuICAgICAgICBzZXRUaW1lb3V0IEBiYXRjaCwgQGNvbmZpZy5yYXRlTGltaXQgKyBAY29uZmlnLmNvbW1pdFRpbWVvdXRcblxuICBiYXRjaENvbXBsZXRlOiAoZXJyLCByZXNwKSA9PlxuICAgIHJldHVybiBAZW1pdCgnZXJyb3InLCBlcnIpIGlmIGVyclxuICAgIEBlbWl0ICdiYXRjaENvbXBsZXRlJywgcmVzcFxuXG4gIHRhc2s6ICh0YXNrLCBjYWxsYmFjaykgPT5cbiAgICBAZW1pdCAndGFzaycsIHRhc2tcbiAgICBAW0Bjb25maWcuYmF0Y2hUeXBlXSB0YXNrLCBjYWxsYmFja1xuXG4gIGJhdGNoX3NpbmdsZTogKHRhc2ssIGRvbmUpID0+XG4gICAgaW5kZXggPSBbXVxuICAgIGZvciBrZXksIHZhbHVlIG9mIHRhc2suYmF0Y2hcbiAgICAgIGluZGV4LnB1c2hcbiAgICAgICAgaW5kZXg6XG4gICAgICAgICAgX2luZGV4OiB2YWx1ZS5pbmRleFxuICAgICAgICAgIF90eXBlOiB2YWx1ZS50eXBlXG4gICAgICAgICAgX2lkOiB2YWx1ZS5pZFxuICAgICAgaW5kZXgucHVzaCB2YWx1ZS5ib2R5IGlmIHZhbHVlLmJvZHk/XG5cbiAgICBAZXNDbGllbnQuYnVsayBib2R5OiBpbmRleCwgKGVyciwgcmVzKSAtPlxuICAgICAgcmV0dXJuIGRvbmUoZXJyKSBpZiBlcnJcbiAgICAgIGRvbmUobnVsbCwgcmVzKVxuXG4gIGNsb3NlOiAtPlxuICAgIEBlc0NsaWVudC5jbG9zZSgpXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IEVsYXN0aWNRdWV1ZVxuIl19