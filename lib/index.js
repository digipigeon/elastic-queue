var ElasticQueue, Hoek, async, baseConfig, elasticsearch, events, exports,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

elasticsearch = require('elasticsearch');

Hoek = require('hoek');

async = require('async');

events = require('events');

baseConfig = {
  elasticsearch: {
    client: {
      host: "localhost:9200",
      log: "info",
      minSockets: 1,
      sniffInterval: 60000,
      sniffOnStart: true,
      suggestCompression: true
    }
  },
  concurency: 1,
  batchSize: 500,
  commitTimeout: 1000,
  rateLimit: 2000,
  batchType: "batch_single"
};

ElasticQueue = (function(superClass) {
  extend(ElasticQueue, superClass);

  function ElasticQueue(config) {
    if (config == null) {
      config = {};
    }
    this.batch_single = bind(this.batch_single, this);
    this.task = bind(this.task, this);
    this.batchComplete = bind(this.batchComplete, this);
    this.batch = bind(this.batch, this);
    this.check = bind(this.check, this);
    this.drain = bind(this.drain, this);
    this.config = Hoek.applyToDefaults(baseConfig, config);
    this.queue = [];
    this.checkTimer = setInterval(this.check, this.config.rateLimit);
    this.async = async.queue(this.task, this.config.concurency);
    this.async.drain = this.drain;
    this.count = 1;
    this.setup_elastic();
  }

  ElasticQueue.prototype.drain = function() {
    if (this.queue.length === 0) {
      return this.emit('drain');
    }
  };

  ElasticQueue.prototype.setup_elastic = function() {
    return this.esClient = new elasticsearch.Client(this.config.elasticsearch.client);
  };

  ElasticQueue.prototype.push = function(item) {
    return this.queue.push(item);
  };

  ElasticQueue.prototype.check = function() {
    if (this.queue.length >= this.config.batchSize) {
      return this.batch();
    }
  };

  ElasticQueue.prototype.batch = function() {
    var size;
    size = this.queue.length;
    if (size >= this.config.batchSize) {
      size = this.config.batchSize;
    }
    if (size > 0) {
      this.async.push({
        batch: this.queue.splice(0, size),
        count: this.count++
      }, this.batchComplete);
    }
    if (this.queue.length > 0) {
      clearTimeout(this.batchTimeout);
      return this.batchTimeout = setTimeout(this.batch, this.config.rateLimit + this.config.commitTimeout);
    }
  };

  ElasticQueue.prototype.batchComplete = function(err, resp) {
    if (err) {
      return this.emit('error', err);
    }
    return this.emit('batchComplete', resp);
  };

  ElasticQueue.prototype.task = function(task, callback) {
    this.emit('task', task);
    return this[this.config.batchType](task, callback);
  };

  ElasticQueue.prototype.batch_single = function(task, done) {
    var index, key, ref, value;
    index = [];
    ref = task.batch;
    for (key in ref) {
      value = ref[key];
      index.push({
        index: {
          _index: value.index,
          _type: value.type,
          _id: value.id
        }
      });
      if (value.body != null) {
        index.push(value.body);
      }
    }
    return this.esClient.bulk({
      body: index
    }, function(err, res) {
      if (err) {
        return done(err);
      }
      return done(null, res);
    });
  };

  ElasticQueue.prototype.close = function() {
    return this.esClient.close();
  };

  return ElasticQueue;

})(events.EventEmitter);

module.exports = exports = ElasticQueue;

//# sourceMappingURL=data:application/json;base64,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LE9BQUEsR0FBVSxZQXBGM0IsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImVsYXN0aWNzZWFyY2ggPSByZXF1aXJlICdlbGFzdGljc2VhcmNoJ1xuSG9layA9IHJlcXVpcmUgJ2hvZWsnXG5hc3luYyA9IHJlcXVpcmUgJ2FzeW5jJ1xuZXZlbnRzID0gcmVxdWlyZSAnZXZlbnRzJ1xuXG5iYXNlQ29uZmlnID1cbiAgZWxhc3RpY3NlYXJjaDpcbiAgICBjbGllbnQ6XG4gICAgICBob3N0OiBcImxvY2FsaG9zdDo5MjAwXCJcbiAgICAgIGxvZzogXCJpbmZvXCJcbiAgICAgIG1pblNvY2tldHM6IDFcbiAgICAgIHNuaWZmSW50ZXJ2YWw6IDYwMDAwXG4gICAgICBzbmlmZk9uU3RhcnQ6IHRydWVcbiAgICAgIHN1Z2dlc3RDb21wcmVzc2lvbjogdHJ1ZVxuICBjb25jdXJlbmN5OiAxICMgbnVtYmVyIG9mIGFjdGl2ZSBiYXRjaGVzXG4gIGJhdGNoU2l6ZTogNTAwICMgYmF0Y2ggc2l6ZVxuICBjb21taXRUaW1lb3V0OiAxMDAwICMgd2FpdCB0aW1lIGJlZm9yZSBzZW5kaW5nIHBhcnRpYWwgYmF0Y2hlc1xuICByYXRlTGltaXQ6IDIwMDBcbiAgYmF0Y2hUeXBlOiBcImJhdGNoX3NpbmdsZVwiICMgYmF0Y2hfc2luZ2xlOiBjb252ZXJ0IHNpbmdsZXMgaW50byBiYXRjaGVzXG5cbmNsYXNzIEVsYXN0aWNRdWV1ZSBleHRlbmRzIGV2ZW50cy5FdmVudEVtaXR0ZXJcbiAgY29uc3RydWN0b3I6IChjb25maWcgPSB7fSktPlxuICAgIEBjb25maWcgPSBIb2VrLmFwcGx5VG9EZWZhdWx0cyBiYXNlQ29uZmlnLCBjb25maWdcbiAgICBAcXVldWUgPSBbXVxuICAgIEBjaGVja1RpbWVyID0gc2V0SW50ZXJ2YWwgQGNoZWNrLCBAY29uZmlnLnJhdGVMaW1pdFxuICAgIEBhc3luYyA9IGFzeW5jLnF1ZXVlIEB0YXNrLCBAY29uZmlnLmNvbmN1cmVuY3lcbiAgICBAYXN5bmMuZHJhaW4gPSBAZHJhaW5cbiAgICBAY291bnQgPSAxXG4gICAgQHNldHVwX2VsYXN0aWMoKVxuXG4gIGRyYWluOiA9PlxuICAgIGlmIEBxdWV1ZS5sZW5ndGggaXMgMFxuICAgICAgQGVtaXQgJ2RyYWluJ1xuXG4gIHNldHVwX2VsYXN0aWM6IC0+XG4gICAgQGVzQ2xpZW50ID0gbmV3IGVsYXN0aWNzZWFyY2guQ2xpZW50IEBjb25maWcuZWxhc3RpY3NlYXJjaC5jbGllbnRcblxuICBwdXNoOiAoaXRlbSktPlxuICAgIEBxdWV1ZS5wdXNoIGl0ZW1cblxuICBjaGVjazogPT5cbiAgICBpZiBAcXVldWUubGVuZ3RoID49IEBjb25maWcuYmF0Y2hTaXplXG4gICAgICBAYmF0Y2goKVxuXG4gIGJhdGNoOiA9PlxuICAgIHNpemUgPSBAcXVldWUubGVuZ3RoXG4gICAgc2l6ZSA9IEBjb25maWcuYmF0Y2hTaXplIGlmIHNpemUgPj0gQGNvbmZpZy5iYXRjaFNpemVcblxuICAgIGlmIHNpemUgPiAwXG4gICAgICBAYXN5bmMucHVzaFxuICAgICAgICBiYXRjaDogQHF1ZXVlLnNwbGljZSgwLCBzaXplKVxuICAgICAgICBjb3VudDogQGNvdW50KyssXG4gICAgICAgIEBiYXRjaENvbXBsZXRlXG5cbiAgICBpZiBAcXVldWUubGVuZ3RoID4gMFxuICAgICAgY2xlYXJUaW1lb3V0IEBiYXRjaFRpbWVvdXRcbiAgICAgIEBiYXRjaFRpbWVvdXQgPVxuICAgICAgICBzZXRUaW1lb3V0IEBiYXRjaCwgQGNvbmZpZy5yYXRlTGltaXQgKyBAY29uZmlnLmNvbW1pdFRpbWVvdXRcblxuICBiYXRjaENvbXBsZXRlOiAoZXJyLCByZXNwKT0+XG4gICAgcmV0dXJuIEBlbWl0KCdlcnJvcicsIGVycikgaWYgZXJyXG4gICAgQGVtaXQgJ2JhdGNoQ29tcGxldGUnLCByZXNwXG5cbiAgdGFzazogKHRhc2ssIGNhbGxiYWNrKT0+XG4gICAgQGVtaXQgJ3Rhc2snLCB0YXNrXG4gICAgQFtAY29uZmlnLmJhdGNoVHlwZV0gdGFzaywgY2FsbGJhY2tcblxuICBiYXRjaF9zaW5nbGU6ICh0YXNrLCBkb25lKT0+XG4gICAgaW5kZXggPSBbXVxuICAgIGZvciBrZXksIHZhbHVlIG9mIHRhc2suYmF0Y2hcbiAgICAgIGluZGV4LnB1c2hcbiAgICAgICAgaW5kZXg6XG4gICAgICAgICAgX2luZGV4OiB2YWx1ZS5pbmRleFxuICAgICAgICAgIF90eXBlOiB2YWx1ZS50eXBlXG4gICAgICAgICAgX2lkOiB2YWx1ZS5pZFxuICAgICAgaW5kZXgucHVzaCB2YWx1ZS5ib2R5IGlmIHZhbHVlLmJvZHk/XG5cbiAgICBAZXNDbGllbnQuYnVsayBib2R5OiBpbmRleCwgKGVyciwgcmVzKSAtPlxuICAgICAgcmV0dXJuIGRvbmUoZXJyKSBpZiBlcnJcbiAgICAgIGRvbmUobnVsbCwgcmVzKVxuXG4gIGNsb3NlOiAtPlxuICAgIEBlc0NsaWVudC5jbG9zZSgpXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IEVsYXN0aWNRdWV1ZSJdfQ==